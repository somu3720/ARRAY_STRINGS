class Solution {
    public String longestPrefix(String s) {
        
        int n = s.length();
        
        if(n==1)     // check if length is 1 no prefix = suffix
        {
            return "";
        }
        
        long p = 31;   // take prime no
        long mod = 1000000007; // take mod value 10^9 + 7;
        long pow = 1; // take power value;
        
        long ph = 0;    // preffx_hash
        long sh = 0;    //suffix_hash
        int ans = 0;
 
   // https://www.youtube.com/watch?v=8f_JcbwoBQY&t=137s     
        
        for(int i = 0; i < n-1; i++)  // why n-1 ? bcos it is for proper prefix, where last char doesn't count
        {
            ph = ((ph*p) + (s.charAt(i) - 'a' + 1)) % mod;          // ph formula reverse hash
            sh = (sh +   ((s.charAt(n - 1 - i) - 'a' + 1) * pow) % mod) % mod;  // sh formula
            
            pow = (pow*p) % mod;
            
            if(ph == sh)
                ans = i+1;
    
        }
        
        
        
        return s.substring(0,ans);
    }
}
